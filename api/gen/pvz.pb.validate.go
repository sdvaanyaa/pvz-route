// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderRequestMultiError, or nil if none found.
func (m *AcceptOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) < 1 {
		err := AcceptOrderRequestValidationError{
			field:  "OrderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := AcceptOrderRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() == nil {
		err := AcceptOrderRequestValidationError{
			field:  "ExpiresAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.PackageType != nil {

		if _, ok := PackageType_name[int32(m.GetPackageType())]; !ok {
			err := AcceptOrderRequestValidationError{
				field:  "PackageType",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AcceptOrderRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AcceptOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AcceptOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderRequestMultiError) AllErrors() []error { return m }

// AcceptOrderRequestValidationError is the validation error returned by
// AcceptOrderRequest.Validate if the designated constraints aren't met.
type AcceptOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderRequestValidationError) ErrorName() string {
	return "AcceptOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderRequestValidationError{}

// Validate checks the field values on OrderIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderIdRequestMultiError,
// or nil if none found.
func (m *OrderIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) < 1 {
		err := OrderIdRequestValidationError{
			field:  "OrderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderIdRequestMultiError(errors)
	}

	return nil
}

// OrderIdRequestMultiError is an error wrapping multiple validation errors
// returned by OrderIdRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderIdRequestMultiError) AllErrors() []error { return m }

// OrderIdRequestValidationError is the validation error returned by
// OrderIdRequest.Validate if the designated constraints aren't met.
type OrderIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderIdRequestValidationError) ErrorName() string { return "OrderIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderIdRequestValidationError{}

// Validate checks the field values on OrderResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderResponseMultiError, or
// nil if none found.
func (m *OrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderResponseMultiError(errors)
	}

	return nil
}

// OrderResponseMultiError is an error wrapping multiple validation errors
// returned by OrderResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderResponseMultiError) AllErrors() []error { return m }

// OrderResponseValidationError is the validation error returned by
// OrderResponse.Validate if the designated constraints aren't met.
type OrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderResponseValidationError) ErrorName() string { return "OrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderResponseValidationError{}

// Validate checks the field values on ProcessOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessOrdersRequestMultiError, or nil if none found.
func (m *ProcessOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ProcessOrdersRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ActionType_name[int32(m.GetAction())]; !ok {
		err := ProcessOrdersRequestValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetOrderIds()) < 1 {
		err := ProcessOrdersRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProcessOrdersRequestMultiError(errors)
	}

	return nil
}

// ProcessOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessOrdersRequestMultiError) AllErrors() []error { return m }

// ProcessOrdersRequestValidationError is the validation error returned by
// ProcessOrdersRequest.Validate if the designated constraints aren't met.
type ProcessOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessOrdersRequestValidationError) ErrorName() string {
	return "ProcessOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessOrdersRequestValidationError{}

// Validate checks the field values on ProcessResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProcessResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProcessResultMultiError, or
// nil if none found.
func (m *ProcessResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessResultMultiError(errors)
	}

	return nil
}

// ProcessResultMultiError is an error wrapping multiple validation errors
// returned by ProcessResult.ValidateAll() if the designated constraints
// aren't met.
type ProcessResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessResultMultiError) AllErrors() []error { return m }

// ProcessResultValidationError is the validation error returned by
// ProcessResult.Validate if the designated constraints aren't met.
type ProcessResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessResultValidationError) ErrorName() string { return "ProcessResultValidationError" }

// Error satisfies the builtin error interface
func (e ProcessResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessResultValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ListOrdersRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InPvz != nil {
		// no validation rules for InPvz
	}

	if m.LastN != nil {
		// no validation rules for LastN
	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on OrdersList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrdersList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrdersListMultiError, or
// nil if none found.
func (m *OrdersList) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdersListValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdersListValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdersListValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return OrdersListMultiError(errors)
	}

	return nil
}

// OrdersListMultiError is an error wrapping multiple validation errors
// returned by OrdersList.ValidateAll() if the designated constraints aren't met.
type OrdersListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersListMultiError) AllErrors() []error { return m }

// OrdersListValidationError is the validation error returned by
// OrdersList.Validate if the designated constraints aren't met.
type OrdersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersListValidationError) ErrorName() string { return "OrdersListValidationError" }

// Error satisfies the builtin error interface
func (e OrdersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersListValidationError{}

// Validate checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsRequestMultiError, or nil if none found.
func (m *ListReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReturnsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReturnsRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReturnsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReturnsRequestMultiError(errors)
	}

	return nil
}

// ListReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by ListReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsRequestMultiError) AllErrors() []error { return m }

// ListReturnsRequestValidationError is the validation error returned by
// ListReturnsRequest.Validate if the designated constraints aren't met.
type ListReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsRequestValidationError) ErrorName() string {
	return "ListReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsRequestValidationError{}

// Validate checks the field values on ReturnsList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnsList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnsListMultiError, or
// nil if none found.
func (m *ReturnsList) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReturnsListValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReturnsListValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReturnsListValidationError{
					field:  fmt.Sprintf("Returns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReturnsListMultiError(errors)
	}

	return nil
}

// ReturnsListMultiError is an error wrapping multiple validation errors
// returned by ReturnsList.ValidateAll() if the designated constraints aren't met.
type ReturnsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnsListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnsListMultiError) AllErrors() []error { return m }

// ReturnsListValidationError is the validation error returned by
// ReturnsList.Validate if the designated constraints aren't met.
type ReturnsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnsListValidationError) ErrorName() string { return "ReturnsListValidationError" }

// Error satisfies the builtin error interface
func (e ReturnsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnsListValidationError{}

// Validate checks the field values on GetHistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryRequestMultiError, or nil if none found.
func (m *GetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHistoryRequestMultiError(errors)
	}

	return nil
}

// GetHistoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetHistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryRequestMultiError) AllErrors() []error { return m }

// GetHistoryRequestValidationError is the validation error returned by
// GetHistoryRequest.Validate if the designated constraints aren't met.
type GetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryRequestValidationError) ErrorName() string {
	return "GetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryRequestValidationError{}

// Validate checks the field values on OrderHistoryList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderHistoryList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderHistoryList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderHistoryListMultiError, or nil if none found.
func (m *OrderHistoryList) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderHistoryList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderHistoryListValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderHistoryListValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderHistoryListValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderHistoryListMultiError(errors)
	}

	return nil
}

// OrderHistoryListMultiError is an error wrapping multiple validation errors
// returned by OrderHistoryList.ValidateAll() if the designated constraints
// aren't met.
type OrderHistoryListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderHistoryListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderHistoryListMultiError) AllErrors() []error { return m }

// OrderHistoryListValidationError is the validation error returned by
// OrderHistoryList.Validate if the designated constraints aren't met.
type OrderHistoryListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderHistoryListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderHistoryListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderHistoryListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderHistoryListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderHistoryListValidationError) ErrorName() string { return "OrderHistoryListValidationError" }

// Error satisfies the builtin error interface
func (e OrderHistoryListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderHistoryList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderHistoryListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderHistoryListValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	// no validation rules for TotalPrice

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssuedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "IssuedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "IssuedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ReturnedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ReturnedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArchivedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ArchivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ArchivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArchivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ArchivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PackageType != nil {
		// no validation rules for PackageType
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderHistoryMultiError, or
// nil if none found.
func (m *OrderHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderHistoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderHistoryMultiError(errors)
	}

	return nil
}

// OrderHistoryMultiError is an error wrapping multiple validation errors
// returned by OrderHistory.ValidateAll() if the designated constraints aren't met.
type OrderHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderHistoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderHistoryMultiError) AllErrors() []error { return m }

// OrderHistoryValidationError is the validation error returned by
// OrderHistory.Validate if the designated constraints aren't met.
type OrderHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderHistoryValidationError) ErrorName() string { return "OrderHistoryValidationError" }

// Error satisfies the builtin error interface
func (e OrderHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderHistoryValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() > 100000 {
		err := PaginationValidationError{
			field:  "Page",
			reason: "value must be less than or equal to 100000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCountOnPage() > 100000 {
		err := PaginationValidationError{
			field:  "CountOnPage",
			reason: "value must be less than or equal to 100000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}
